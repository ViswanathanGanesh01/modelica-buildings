within Buildings.Electrical.AC.ThreePhasesBalanced.Loads.MotorDrive.Coupled;
package Beta
  model Pump_beta "Motor coupled chiller"
    extends Buildings.Fluid.Interfaces.PartialTwoPort(
      port_a(p(start=Medium.p_default)),
      port_b(p(start=Medium.p_default)));
    extends Buildings.Electrical.Interfaces.PartialOnePort(
      redeclare package PhaseSystem =
          Buildings.Electrical.PhaseSystems.OnePhase,
      redeclare replaceable Interfaces.Terminal_n terminal);

    parameter Boolean addPowerToMedium=true
      "Set to false to avoid any power (e.g heat generated by the pump) being 
    added to medium";
    replaceable parameter Buildings.Fluid.Movers.Data.Generic per
      constrainedby Buildings.Fluid.Movers.Data.Generic
      "Record with performance data"
       annotation (choicesAllMatching=true,Placement(transformation(
       extent={{-80,-68},{-60,-48}})));

    //Motor parameters
    parameter Integer pole=4 "Number of pole pairs";
    parameter Modelica.Units.SI.Resistance R_s=0.013
      "Electric resistance of stator";
    parameter Modelica.Units.SI.Resistance R_r=0.009
      "Electric resistance of rotor";
    parameter Modelica.Units.SI.Reactance X_s=0.14
      "Complex component of the impedance of stator";
    parameter Modelica.Units.SI.Reactance X_r=0.12
      "Complex component of the impedance of rotor";
    parameter Modelica.Units.SI.Reactance X_m=2.4
      "Complex component of the magnetizing reactance";
    parameter Modelica.Units.SI.Inertia JLoad(min=0)=2 "Pump inertia";
    parameter Modelica.Units.SI.Inertia JMotor=2 "Motor inertia";

    //Controller parameters
    parameter Boolean have_controller = true
      "Set to true for enableing PID control";
    parameter Modelica.Blocks.Types.SimpleController
      controllerType=Modelica.Blocks.Types.SimpleController.PI
      "Type of controller"
        annotation (Dialog(tab="Advanced",
                           group="Controller",
                           enable=have_controller));
    parameter Real k(min=0) = 1
       "Gain of controller"
        annotation (Dialog(tab="Advanced",
                           group="Controller",
                           enable=have_controller));
    parameter Modelica.Units.SI.Time Ti(min=Modelica.Constants.small)=0.5
       "Time constant of Integrator block"
        annotation (Dialog(tab="Advanced",
                           group="Controller",
                           enable=have_controller and
      controllerType == Modelica.Blocks.Types.SimpleController.PI or
      controllerType == Modelica.Blocks.Types.SimpleController.PID));
    parameter Modelica.Units.SI.Time Td(min=0) = 0.1
       "Time constant of Derivative block"
        annotation (Dialog(tab="Advanced",
                           group="Controller",
                           enable=have_controller and
      controllerType == Modelica.Blocks.Types.SimpleController.PD or
      controllerType == Modelica.Blocks.Types.SimpleController.PID));
    parameter Real yMax(start=1)=1
      "Upper limit of output"
       annotation (Dialog(tab="Advanced",
                         group="Controller",
                         enable=have_controller));
    parameter Real yMin=0
      "Lower limit of output"
       annotation (Dialog(tab="Advanced",
                         group="Controller",
                         enable=have_controller));

    final Modelica.Blocks.Sources.RealExpression loaTor(y=pum.shaft.tau)
      "Pump torque block"
      annotation (Placement(transformation(extent={{-28,0},{-48,20}})));
    Buildings.Electrical.AC.ThreePhasesBalanced.Loads.MotorDrive.ThermoFluid.Pump pum(
      redeclare final package Medium = Medium,
      final addPowerToMedium=addPowerToMedium,
      Nrpm_nominal=1500,
      redeclare final
        Buildings.Fluid.Movers.Data.Pumps.Wilo.VeroLine50slash150dash4slash2 per)
                     "Mechanical pump with mechanical interface"
      annotation (Placement(transformation(extent={{-10,-10},{10,10}})));

    Modelica.Blocks.Interfaces.RealInput setPoi "Set point of control target"
      annotation (Placement(transformation(
          extent={{-10,-10},{10,10}},
          rotation=0,
          origin={-110,80}), iconTransformation(
          extent={{-10,-10},{10,10}},
          rotation=0,
          origin={-110,80})));
    Modelica.Blocks.Interfaces.RealInput meaPoi "Measured value of control target"
      annotation (Placement(transformation(extent={{-120,40},{-100,60}}),
          iconTransformation(extent={{-120,30},{-100,50}})));
    Modelica.Blocks.Interfaces.RealOutput P(final quantity="Power", final unit="W")
      "Real power"
      annotation (Placement(transformation(extent={{100,80},{120,100}}),
          iconTransformation(extent={{100,80},{120,100}})));
    Modelica.Blocks.Interfaces.RealOutput Q(final quantity="Power", final unit="var")
      "Reactive power"
      annotation (Placement(transformation(extent={{100,60},{120,80}}),
          iconTransformation(extent={{100,60},{120,80}})));
    Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heatPort
      "Heat dissipation to environment"
      annotation (Placement(transformation(extent={{-10,-78},{10,-58}}),
          iconTransformation(extent={{-10,-78},{10,-58}})));

    ExperimentalInductionMotorsBeta.InductionMotor.SquirrelCageDriveBeta_Feedback motDri(
      P=pole,
      J=JMotor,
      Lr=X_r,
      Ls=X_s,
      Rr=R_r,
      Lm=X_m,
      Rs=R_s) annotation (Placement(transformation(extent={{-52,28},{-28,48}})));
  equation

    connect(port_a, pum.port_a) annotation (Line(points={{-100,0},{-10,0}},
            color={0,127,255},
        thickness=1));
    connect(pum.port_b, port_b) annotation (Line(points={{10,0},{100,0}},
            color={0,127,255},
        thickness=1));
    connect(pum.heatPort, heatPort) annotation (Line(points={{0,-6.8},{0,-20},
            {0,-68},{0,-68}}, color={191,0,0},
        thickness=1));
    connect(motDri.setPoi, setPoi) annotation (Line(points={{-53.8,46},{-60,46},
            {-60,80},{-110,80}},color={0,0,127},
        thickness=1));
    connect(motDri.mea, meaPoi) annotation (Line(points={{-53.8,40},{-94,40},{
            -94,50},{-110,50}},
                            color={0,0,127},
        thickness=1));
    connect(motDri.tau_m, loaTor.y) annotation (Line(points={{-53.8,30},{-60,30},
            {-60,10},{-49,10}}, color={0,0,127},
        thickness=1));
    connect(motDri.terminal, terminal) annotation (Line(points={{-38,48},{-38,
            86},{0,86},{0,100}},
                             color={0,120,120},
        thickness=1));
    connect(motDri.shaft, pum.shaft)
      annotation (Line(points={{-28,38},{0,38},{0,10}}, color={0,0,0},
        thickness=1));
    connect(port_a, port_a) annotation (Line(
        points={{-100,0},{-100,0}},
        color={0,127,255},
        thickness=1));
    annotation (Icon(coordinateSystem(preserveAspectRatio=true,
          extent={{-100,-80},{100,100}}),  graphics={
          Rectangle(
            extent={{-100,16},{100,-16}},
            lineColor={0,0,0},
            fillColor={0,127,255},
            fillPattern=FillPattern.HorizontalCylinder),
          Rectangle(
            visible=use_inputFilter,
            extent={{-10,44},{10,100}},
            lineColor={0,0,0},
            fillColor={135,135,135},
            fillPattern=FillPattern.Solid),
          Ellipse(
            extent={{-58,58},{58,-58}},
            lineColor={0,0,0},
            fillPattern=FillPattern.Sphere,
            fillColor={0,100,199}),
          Polygon(
            points={{0,50},{0,-50},{54,0},{0,50}},
            lineColor={0,0,0},
            pattern=LinePattern.None,
            fillPattern=FillPattern.HorizontalCylinder,
            fillColor={255,255,255}),
          Ellipse(
            extent={{4,16},{36,-16}},
            lineColor={0,0,0},
            fillPattern=FillPattern.Sphere,
            visible=energyDynamics <> Modelica.Fluid.Types.Dynamics.SteadyState,
            fillColor={0,100,199}),
          Line(
            points={{10,90},{100,90}},
            color={0,0,0},
            smooth=Smooth.None),
          Line(
            points={{10,70},{100,70}},
            color={0,0,0},
            smooth=Smooth.None),
          Text(extent={{66,104},{116,90}},
            textColor={0,0,127},
            textString="P"),
          Text(extent={{66,84},{116,70}},
            textColor={0,0,127},
            textString="Q"),
          Text(extent={{-140,108},{-90,94}},
            textColor={0,0,127},
            textString="set_point"),
          Text(extent={{-140,72},{-60,44}},
            textColor={0,0,127},
            textString="measure_value")}),
          defaultComponentName="pum",
      Documentation(info="<html>
<p>
This is a model of a squirrel cage induction motor coupled chiller with ideal 
speed control. The model has electrical interfaces and can be used for 
simulating microgrids and discussing grid interactions.
</p>
</html>",   revisions="<html>
<ul>
<li>
September 15, 2021, by Mingzhe Liu:<br/>
Refactored implementation to add mechanical interface and integrate inertia.
</li>
<li>
March 6, 2019, by Yangyang Fu:<br/>
First implementation.
</li>
</ul>
</html>"),
      Diagram(coordinateSystem(extent={{-100,-80},{100,100}})));
  end Pump_beta;

  model HeatPump_Beta "Motor coupled heat pump"
    extends Buildings.Fluid.Interfaces.PartialFourPortInterface(
      m1_flow_nominal = QCon_flow_nominal/cp1_default/dTCon_nominal,
      m2_flow_nominal = QEva_flow_nominal/cp2_default/dTEva_nominal);
    extends Buildings.Electrical.Interfaces.PartialOnePort(
      redeclare package PhaseSystem =
          Buildings.Electrical.PhaseSystems.OnePhase,
      redeclare replaceable Interfaces.Terminal_n terminal);

    //Heat pump parameters
    parameter Modelica.Units.SI.HeatFlowRate QEva_flow_nominal(max=0) = -P_nominal * COP_nominal
      "Nominal cooling heat flow rate (Negative)"
      annotation (Dialog(group="Nominal condition"));
    parameter Modelica.Units.SI.HeatFlowRate QCon_flow_nominal(min=0) = P_nominal - QEva_flow_nominal
      "Nominal heating flow rate (Positive)"
      annotation (Dialog(group="Nominal condition"));
    parameter Modelica.Units.SI.TemperatureDifference dTEva_nominal(
      final max=0) = -10 "Temperature difference evaporator outlet-inlet"
      annotation (Dialog(group="Nominal condition"));
    parameter Modelica.Units.SI.TemperatureDifference dTCon_nominal(
      final min=0) = 10 "Temperature difference condenser outlet-inlet"
      annotation (Dialog(group="Nominal condition"));
    parameter Modelica.Units.SI.Power P_nominal(min=0)
      "Nominal compressor power (at y=1)"
      annotation (Dialog(group="Nominal condition"));
    parameter Modelica.Units.NonSI.AngularVelocity_rpm Nrpm_nominal=1500
      "Nominal rotational speed of compressor"
      annotation (Dialog(group="Nominal condition"));
    parameter Modelica.Units.SI.Pressure dp1_nominal(displayUnit="Pa")
      "Pressure difference over condenser"
      annotation (Dialog(group="Nominal condition"));
    parameter Modelica.Units.SI.Pressure dp2_nominal(displayUnit="Pa")
      "Pressure difference over evaporator"
      annotation (Dialog(group="Nominal condition"));

    //Efficiency
    parameter Boolean use_eta_Carnot_nominal = true
      "Set to true to use Carnot effectiveness etaCarnot_nominal rather than COP_nominal"
      annotation(Dialog(group="Efficiency"));
    parameter Real etaCarnot_nominal(unit="1")=COP_nominal/(TUseAct_nominal/(
      TCon_nominal + TAppCon_nominal - (TEva_nominal - TAppEva_nominal)))
      "Carnot effectiveness (=COP/COP_Carnot) used if use_eta_Carnot_nominal = true"
      annotation (Dialog(group="Efficiency", enable=use_eta_Carnot_nominal));
    parameter Real COP_nominal(unit="1")=etaCarnot_nominal*TUseAct_nominal/(
      TCon_nominal + TAppCon_nominal - (TEva_nominal - TAppEva_nominal))
      "Coefficient of performance at TEva_nominal and TCon_nominal, used if use_eta_Carnot_nominal = false"
      annotation (Dialog(group="Efficiency", enable=not use_eta_Carnot_nominal));
    parameter Modelica.Units.SI.Temperature TCon_nominal=303.15
      "Condenser temperature used to compute COP_nominal if use_eta_Carnot_nominal=false"
      annotation (Dialog(group="Efficiency", enable=not use_eta_Carnot_nominal));
    parameter Modelica.Units.SI.Temperature TEva_nominal=278.15
      "Evaporator temperature used to compute COP_nominal if use_eta_Carnot_nominal=false"
      annotation (Dialog(group="Efficiency", enable=not use_eta_Carnot_nominal));
    parameter Real a[:] = {1}
      "Coefficients for efficiency curve (need p(a=a, yPL=1)=1)"
      annotation (Dialog(group="Efficiency"));
    parameter Modelica.Units.SI.TemperatureDifference TAppCon_nominal(min=0) = if cp1_default < 1500 then 5 else 2
      "Temperature difference between refrigerant and working fluid outlet in condenser"
      annotation (Dialog(group="Efficiency"));
    parameter Modelica.Units.SI.TemperatureDifference TAppEva_nominal(min=0) = if cp2_default < 1500 then 5 else 2
      "Temperature difference between refrigerant and working fluid outlet in evaporator"
      annotation (Dialog(group="Efficiency"));

    //Motor parameters
    parameter Integer pole=4 "Number of pole pairs";
    parameter Modelica.Units.SI.Resistance R_s=0.641
      "Electric resistance of stator";
    parameter Modelica.Units.SI.Resistance R_r=0.332
      "Electric resistance of rotor";
    parameter Modelica.Units.SI.Reactance X_s=1.106
      "Complex component of the impedance of stator";
    parameter Modelica.Units.SI.Reactance X_r=0.464
      "Complex component of the impedance of rotor";
    parameter Modelica.Units.SI.Reactance X_m=26.3
      "Complex component of the magnetizing reactance";
    parameter Modelica.Units.SI.Inertia JLoad(min=0)=2 "Load inertia";
    parameter Modelica.Units.SI.Inertia JMotor=2 "Motor inertia";

    //Controller parameters
    parameter Boolean have_controller = true
      "Set to true for enableing PID control";
    parameter Modelica.Blocks.Types.SimpleController
    controllerType=Modelica.Blocks.Types.SimpleController.PI
       "Type of controller"
        annotation (Dialog(tab="Advanced",
                           group="Controller",
                           enable=have_controller));
    parameter Real k(min=0) = 1
       "Gain of controller"
        annotation (Dialog(tab="Advanced",
                           group="Controller",
                           enable=have_controller));
    parameter Modelica.Units.SI.Time Ti(min=Modelica.Constants.small)=0.5
       "Time constant of Integrator block"
        annotation (Dialog(tab="Advanced",
                           group="Controller",
                           enable=have_controller and
    controllerType == Modelica.Blocks.Types.SimpleController.PI or
    controllerType == Modelica.Blocks.Types.SimpleController.PID));
    parameter Modelica.Units.SI.Time Td(min=0) = 0.1
       "Time constant of Derivative block"
        annotation (Dialog(tab="Advanced",
                           group="Controller",
                           enable=have_controller and
    controllerType == Modelica.Blocks.Types.SimpleController.PD or
    controllerType == Modelica.Blocks.Types.SimpleController.PID));
    parameter Real yMax(start=1)=1
      "Upper limit of output"
       annotation (Dialog(tab="Advanced",
                         group="Controller",
                         enable=have_controller));
    parameter Real yMin=0
      "Lower limit of output"
       annotation (Dialog(tab="Advanced",
                         group="Controller",
                         enable=have_controller));

    final Modelica.Blocks.Sources.RealExpression loaTor(y=mecHea.shaft.tau)
      "Heat pump torque block"
      annotation (Placement(transformation(extent={{-20,12},{-40,32}})));
    Buildings.Electrical.AC.ThreePhasesBalanced.Loads.MotorDrive.ThermoFluid.HeatPump mecHea(
      redeclare final package Medium1 = Medium1,
      redeclare final package Medium2 = Medium2,
      final m1_flow_nominal=m1_flow_nominal,
      final m2_flow_nominal=m2_flow_nominal,
      final QEva_flow_nominal=QEva_flow_nominal,
      final QCon_flow_nominal=QCon_flow_nominal,
      final dTEva_nominal=dTEva_nominal,
      final dTCon_nominal=dTCon_nominal,
      final P_nominal=P_nominal,
      final Nrpm_nominal=Nrpm_nominal,
      final use_eta_Carnot_nominal=use_eta_Carnot_nominal,
      final etaCarnot_nominal=etaCarnot_nominal,
      final a=a,
      final dp1_nominal=dp1_nominal,
      final dp2_nominal=dp2_nominal,
      final TAppCon_nominal=TAppCon_nominal,
      final TAppEva_nominal=TAppEva_nominal)
      "Heat pump model with mechanical interface"
      annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
    Modelica.Blocks.Interfaces.RealInput setPoi "Set point of control target"
      annotation (Placement(transformation(
          extent={{-10,-10},{10,10}},
          rotation=0,
          origin={-110,90}), iconTransformation(
          extent={{-10,-10},{10,10}},
          rotation=0,
          origin={-110,90})));
    Modelica.Blocks.Interfaces.RealInput meaPoi "Measured value of control target"
      annotation (Placement(transformation(extent={{-120,20},{-100,40}}),
          iconTransformation(extent={{-120,20},{-100,40}})));
    Modelica.Blocks.Interfaces.RealOutput P(final quantity="Power", final unit="W")
      "Real power"
      annotation (Placement(transformation(extent={{100,20},{120,40}}),
          iconTransformation(extent={{100,20},{120,40}})));
    Modelica.Blocks.Interfaces.RealOutput Q(final quantity="Power", final unit="var")
      "Reactive power"
      annotation (Placement(transformation(extent={{100,-40},{120,-20}}),
          iconTransformation(extent={{100,-40},{120,-20}})));

    ExperimentalInductionMotorsBeta.InductionMotor.SquirrelCageDriveBeta_Feedback simMot(
      P=pole,
      J=JMotor,
      Lr=X_r,
      Ls=X_s,
      Rr=R_r,
      Lm=X_m,
      Rs=R_s) annotation (Placement(transformation(extent={{-44,40},{-20,60}})));
  protected
    constant Boolean COP_is_for_cooling = false
      "Set to true if the specified COP is for cooling";

    final parameter Modelica.Units.SI.Temperature TUseAct_nominal=
      if COP_is_for_cooling
        then TEva_nominal - TAppEva_nominal
        else TCon_nominal + TAppCon_nominal
      "Nominal evaporator temperature for chiller or condenser temperature for heat pump, 
    taking into account pinch temperature between fluid and refrigerant";

    final parameter Modelica.Units.SI.SpecificHeatCapacity cp1_default=
      Medium1.specificHeatCapacityCp(Medium1.setState_pTX(
        p = Medium1.p_default,
        T = Medium1.T_default,
        X = Medium1.X_default))
      "Specific heat capacity of medium 1 at default medium state";

    final parameter Modelica.Units.SI.SpecificHeatCapacity cp2_default=
      Medium2.specificHeatCapacityCp(Medium2.setState_pTX(
        p = Medium2.p_default,
        T = Medium2.T_default,
        X = Medium2.X_default))
      "Specific heat capacity of medium 2 at default medium state";

  equation
    connect(port_a1,mecHea. port_a1) annotation (Line(points={{-100,60},{-70,60},
            {-70,6},{-10,6}}, color={0,127,255},
        thickness=1));
    connect(port_b2,mecHea. port_b2) annotation (Line(points={{-100,-60},{-60,-60},
            {-60,-6},{-10,-6}}, color={0,127,255},
        thickness=1));
    connect(port_b1,mecHea. port_b1) annotation (Line(points={{100,60},{60,60},
            {60,6},{10,6}}, color={0,127,255},
        thickness=1));
    connect(port_a2,mecHea. port_a2) annotation (Line(points={{100,-60},{60,-60},
            {60,-6},{10,-6}}, color={0,127,255},
        thickness=1));
    connect(simMot.setPoi, setPoi) annotation (Line(points={{-45.8,58},{-60,58},
            {-60,90},{-110,90}},color={0,0,127},
        thickness=1));
    connect(meaPoi, simMot.mea) annotation (Line(points={{-110,30},{-60,30},{
            -60,52},{-45.8,52}},                                   color={0,0,127},
        thickness=1));
    connect(loaTor.y, simMot.tau_m) annotation (Line(points={{-41,22},{-50,22},
            {-50,42},{-45.8,42}},
                         color={0,0,127},
        thickness=1));
    connect(terminal, simMot.terminal) annotation (Line(points={{0,100},{0,66},
            {-30,66},{-30,60}},         color={0,120,120},
        thickness=1));
    connect(mecHea.shaft, simMot.shaft) annotation (Line(points={{0,10},{0,50},
            {-20,50}},            color={0,0,0},
        thickness=1));
    annotation (Icon(coordinateSystem(preserveAspectRatio=true,extent={{-100,
              -80},{100,100}}),
                         graphics={
          Rectangle(
            extent={{-70,80},{70,-80}},
            lineColor={0,0,255},
            pattern=LinePattern.None,
            fillColor={95,95,95},
            fillPattern=FillPattern.Solid),
          Rectangle(
            extent={{-56,68},{58,50}},
            lineColor={0,0,0},
            fillColor={255,255,255},
            fillPattern=FillPattern.Solid),
          Rectangle(
            extent={{-56,-52},{58,-70}},
            lineColor={0,0,0},
            fillColor={255,255,255},
            fillPattern=FillPattern.Solid),
          Rectangle(
            extent={{-103,64},{98,54}},
            lineColor={0,0,255},
            pattern=LinePattern.None,
            fillColor={0,0,255},
            fillPattern=FillPattern.Solid),
          Rectangle(
            extent={{-2,54},{98,64}},
            lineColor={0,0,255},
            pattern=LinePattern.None,
            fillColor={255,0,0},
            fillPattern=FillPattern.Solid),
          Rectangle(
            extent={{-101,-56},{100,-66}},
            lineColor={0,0,255},
            pattern=LinePattern.None,
            fillColor={0,0,255},
            fillPattern=FillPattern.Solid),
          Rectangle(
            extent={{-100,-66},{0,-56}},
            lineColor={0,0,127},
            pattern=LinePattern.None,
            fillColor={0,0,127},
            fillPattern=FillPattern.Solid),
          Polygon(
            points={{-42,0},{-52,-12},{-32,-12},{-42,0}},
            lineColor={0,0,0},
            smooth=Smooth.None,
            fillColor={255,255,255},
            fillPattern=FillPattern.Solid),
          Polygon(
            points={{-42,0},{-52,10},{-32,10},{-42,0}},
            lineColor={0,0,0},
            smooth=Smooth.None,
            fillColor={255,255,255},
            fillPattern=FillPattern.Solid),
          Rectangle(
            extent={{-44,50},{-40,10}},
            lineColor={0,0,0},
            fillColor={255,255,255},
            fillPattern=FillPattern.Solid),
          Rectangle(
            extent={{-44,-12},{-40,-52}},
            lineColor={0,0,0},
            fillColor={255,255,255},
            fillPattern=FillPattern.Solid),
          Rectangle(
            extent={{38,50},{42,-52}},
            lineColor={0,0,0},
            fillColor={255,255,255},
            fillPattern=FillPattern.Solid),
          Ellipse(
            extent={{18,22},{62,-20}},
            lineColor={0,0,0},
            fillColor={255,255,255},
            fillPattern=FillPattern.Solid),
          Polygon(
            points={{40,22},{22,-10},{58,-10},{40,22}},
            lineColor={0,0,0},
            smooth=Smooth.None,
            fillColor={255,255,255},
            fillPattern=FillPattern.Solid),
          Line(points={{62,0},{80,0}}, color={0,0,255}),
          Line(points={{80,30},{100,30}}, color={0,0,255}),
          Line(points={{80,0},{80,30}}, color={0,0,255}),
          Line(points={{80,-30},{100,-30}}, color={0,0,255}),
          Line(points={{80,-30},{80,0}}, color={0,0,255})}),
          defaultComponentName="hea",
      Documentation(info="<html>
<p>
This is a model of a squirrel cage induction motor coupled heat pump with 
ideal speed control. The model has electrical interfaces and can be used for 
simulating microgrids and discussing grid interactions.
</p>
</html>",   revisions="<html>
<ul>
<li>
October 15, 2021, by Mingzhe Liu:<br/>
First implementation.
</li>
</ul>
</html>"),
      Diagram(coordinateSystem(extent={{-100,-80},{100,100}})));
  end HeatPump_Beta;

  model Chiller_Beta "Motor coupled chiller"
    extends Buildings.Fluid.Interfaces.PartialFourPortInterface(
      m1_flow_nominal = QCon_flow_nominal/cp1_default/dTCon_nominal,
      m2_flow_nominal = QEva_flow_nominal/cp2_default/dTEva_nominal);
    extends Buildings.Electrical.Interfaces.PartialOnePort(
      redeclare package PhaseSystem =
          Buildings.Electrical.PhaseSystems.OnePhase,
      redeclare replaceable Interfaces.Terminal_n terminal);
    //Chiller parameters
    parameter Modelica.Units.SI.HeatFlowRate QEva_flow_nominal(max=0) = -P_nominal * COP_nominal
      "Nominal cooling heat flow rate (Negative)"
      annotation (Dialog(group="Nominal condition"));
    parameter Modelica.Units.SI.HeatFlowRate QCon_flow_nominal(min=0) = P_nominal - QEva_flow_nominal
      "Nominal heating flow rate (Positive)"
      annotation (Dialog(group="Nominal condition"));
    parameter Modelica.Units.SI.TemperatureDifference dTEva_nominal(
      final max=0)=-10 "Temperature difference evaporator outlet-inlet"
      annotation (Dialog(group="Nominal condition"));
    parameter Modelica.Units.SI.TemperatureDifference dTCon_nominal(
      final min=0)=10 "Temperature difference condenser outlet-inlet"
      annotation (Dialog(group="Nominal condition"));
    parameter Modelica.Units.SI.Power P_nominal(min=0)
      "Nominal compressor power (at y=1)"
      annotation (Dialog(group="Nominal condition"));
    parameter Modelica.Units.NonSI.AngularVelocity_rpm Nrpm_nominal=1500
      "Nominal rotational speed of compressor"
      annotation (Dialog(group="Nominal condition"));
    parameter Modelica.Units.SI.Pressure dp1_nominal(displayUnit="Pa")
      "Pressure difference over condenser"
      annotation (Dialog(group="Nominal condition"));
    parameter Modelica.Units.SI.Pressure dp2_nominal(displayUnit="Pa")
      "Pressure difference over evaporator"
      annotation (Dialog(group="Nominal condition"));

    //Efficiency
    parameter Boolean use_eta_Carnot_nominal = true
      "Set to true to use Carnot effectiveness etaCarnot_nominal rather than COP_nominal"
      annotation(Dialog(group="Efficiency"));
    parameter Real etaCarnot_nominal(unit="1")=COP_nominal/(TUseAct_nominal/(
      TCon_nominal + TAppCon_nominal - (TEva_nominal - TAppEva_nominal)))
      "Carnot effectiveness (=COP/COP_Carnot) used if use_eta_Carnot_nominal = true"
      annotation (Dialog(group="Efficiency", enable=use_eta_Carnot_nominal));
    parameter Real COP_nominal(unit="1")=etaCarnot_nominal*TUseAct_nominal/(
      TCon_nominal + TAppCon_nominal - (TEva_nominal - TAppEva_nominal))
      "Coefficient of performance at TEva_nominal and TCon_nominal, used if use_eta_Carnot_nominal = false"
      annotation (Dialog(group="Efficiency", enable=not use_eta_Carnot_nominal));
    parameter Modelica.Units.SI.Temperature TCon_nominal=303.15
      "Condenser temperature used to compute COP_nominal if use_eta_Carnot_nominal=false"
      annotation (Dialog(group="Efficiency", enable=not use_eta_Carnot_nominal));
    parameter Modelica.Units.SI.Temperature TEva_nominal=278.15
      "Evaporator temperature used to compute COP_nominal if use_eta_Carnot_nominal=false"
      annotation (Dialog(group="Efficiency", enable=not use_eta_Carnot_nominal));
    parameter Real a[:] = {1}
      "Coefficients for efficiency curve (need p(a=a, yPL=1)=1)"
      annotation (Dialog(group="Efficiency"));
    parameter Modelica.Units.SI.TemperatureDifference TAppCon_nominal(min=0) = if cp1_default < 1500 then 5 else 2
      "Temperature difference between refrigerant and working fluid outlet in condenser"
      annotation (Dialog(group="Efficiency"));
    parameter Modelica.Units.SI.TemperatureDifference TAppEva_nominal(min=0) = if cp2_default < 1500 then 5 else 2
      "Temperature difference between refrigerant and working fluid outlet in evaporator"
      annotation (Dialog(group="Efficiency"));

    //Motor parameters
    parameter Integer pole=4 "Number of pole pairs";
    parameter Modelica.Units.SI.Resistance R_s=0.641
      "Electric resistance of stator";
    parameter Modelica.Units.SI.Resistance R_r=0.332
      "Electric resistance of rotor";
    parameter Modelica.Units.SI.Reactance X_s=1.106
      "Complex component of the impedance of stator";
    parameter Modelica.Units.SI.Reactance X_r=0.464
      "Complex component of the impedance of rotor";
    parameter Modelica.Units.SI.Reactance X_m=26.3
      "Complex component of the magnetizing reactance";
    parameter Modelica.Units.SI.Inertia JLoad(min=0)=2 "Load inertia";
    parameter Modelica.Units.SI.Inertia JMotor=2 "Motor inertia";

    //Controller parameters
    parameter Boolean have_controller = true
      "Set to true for enableing PID control";
    parameter Modelica.Blocks.Types.SimpleController
    controllerType=Modelica.Blocks.Types.SimpleController.PI
       "Type of controller"
        annotation (Dialog(tab="Advanced",
                           group="Controller",
                           enable=have_controller));
    parameter Real k(min=0) = 1
       "Gain of controller"
        annotation (Dialog(tab="Advanced",
                           group="Controller",
                           enable=have_controller));
    parameter Modelica.Units.SI.Time Ti(min=Modelica.Constants.small)=0.5
       "Time constant of Integrator block"
        annotation (Dialog(tab="Advanced",
                           group="Controller",
                           enable=have_controller and
    controllerType == Modelica.Blocks.Types.SimpleController.PI or
    controllerType == Modelica.Blocks.Types.SimpleController.PID));
    parameter Modelica.Units.SI.Time Td(min=0) = 0.1
       "Time constant of Derivative block"
        annotation (Dialog(tab="Advanced",
                           group="Controller",
                           enable=have_controller and
    controllerType == Modelica.Blocks.Types.SimpleController.PD or
    controllerType == Modelica.Blocks.Types.SimpleController.PID));
    parameter Real yMax(start=1)=1
      "Upper limit of output"
       annotation (Dialog(tab="Advanced",
                         group="Controller",
                         enable=have_controller));
    parameter Real yMin=0
      "Lower limit of output"
       annotation (Dialog(tab="Advanced",
                         group="Controller",
                         enable=have_controller));

    Buildings.Electrical.AC.ThreePhasesBalanced.Loads.MotorDrive.ThermoFluid.Chiller mecChi(
      redeclare final package Medium1 = Medium1,
      redeclare final package Medium2 = Medium2,
      final m1_flow_nominal=m1_flow_nominal,
      final m2_flow_nominal=m2_flow_nominal,
      final dTEva_nominal=dTEva_nominal,
      final dTCon_nominal=dTCon_nominal,
      final use_eta_Carnot_nominal=use_eta_Carnot_nominal,
      final etaCarnot_nominal=etaCarnot_nominal,
      final COP_nominal=COP_nominal,
      final TCon_nominal=TCon_nominal,
      final TEva_nominal=TEva_nominal,
      final a=a,
      final dp1_nominal=dp1_nominal,
      final dp2_nominal=dp2_nominal,
      final TAppCon_nominal=TAppCon_nominal,
      final TAppEva_nominal=TAppEva_nominal,
      final P_nominal=P_nominal,
      final QEva_flow_nominal=QEva_flow_nominal,
      final QCon_flow_nominal=QCon_flow_nominal,
      final Nrpm_nominal=Nrpm_nominal)
      "Chiller model with mechanical interface"
      annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
    final Modelica.Blocks.Sources.RealExpression loaTor(y=mecChi.shaft.tau)
      "Chiller torque block"
      annotation (Placement(transformation(extent={{-16,10},{-36,30}})));
    Buildings.Electrical.AC.ThreePhasesBalanced.Loads.MotorDrive.ExperimentalInductionMotorsBeta.InductionMotor.SquirrelCageDriveBeta_Feedback simMot(
      P=pole,
      final J=JMotor,
      Lr=X_r,
      Ls=X_s,
      Rr=R_r,
      Lm=X_m,
      Rs=R_s,
      reverseActing=false,
      final controllerType=controllerType,
      final k=k,
      final Ti=Ti,
      final Td=Td,
      final yMax=yMax,
      final yMin=yMin) "Motor model"
      annotation (Placement(transformation(extent={{-40,36},{-20,56}})));

    Modelica.Blocks.Interfaces.RealInput setPoi "Set point of control target"
      annotation (Placement(transformation(
          extent={{-10,-10},{10,10}},
          rotation=0,
          origin={-110,90}), iconTransformation(
          extent={{-10,-10},{10,10}},
          rotation=0,
          origin={-110,90})));
    Modelica.Blocks.Interfaces.RealInput meaPoi "Measured value of control target"
      annotation (Placement(transformation(extent={{-120,20},{-100,40}}),
      iconTransformation(extent={{-120,20},{-100,40}})));
    Modelica.Blocks.Interfaces.RealOutput P(final quantity="Power",final unit="W")
      "Real power"
      annotation (Placement(transformation(extent={{100,20},{120,40}}),
      iconTransformation(extent={{100,20}, {120,40}})));
    Modelica.Blocks.Interfaces.RealOutput Q(final quantity="Power",final unit="var")
      "Reactive power"
      annotation (Placement(transformation(extent={{100,-40},{120,-20}}),
      iconTransformation(extent={{100,-40}, {120,-20}})));

  protected
    constant Boolean COP_is_for_cooling = true
      "Set to true if the specified COP is for cooling";

    final parameter Modelica.Units.SI.Temperature TUseAct_nominal=
      if COP_is_for_cooling
        then TEva_nominal - TAppEva_nominal
        else TCon_nominal + TAppCon_nominal
      "Nominal evaporator temperature for chiller or condenser temperature for heat pump, 
    taking into account pinch temperature between fluid and refrigerant";

    final parameter Modelica.Units.SI.SpecificHeatCapacity cp1_default=
      Medium1.specificHeatCapacityCp(Medium1.setState_pTX(
        p = Medium1.p_default,
        T = Medium1.T_default,
        X = Medium1.X_default))
      "Specific heat capacity of medium 1 at default medium state";

    final parameter Modelica.Units.SI.SpecificHeatCapacity cp2_default=
      Medium2.specificHeatCapacityCp(Medium2.setState_pTX(
        p = Medium2.p_default,
        T = Medium2.T_default,
        X = Medium2.X_default))
      "Specific heat capacity of medium 2 at default medium state";

  equation
    connect(port_a1, mecChi.port_a1) annotation (Line(points={{-100,60},{-70,60},
            {-70,6},{-10,6}}, color={0,127,255},
        thickness=1));
    connect(port_b2, mecChi.port_b2) annotation (Line(points={{-100,-60},{-60,-60},
            {-60,-6},{-10,-6}}, color={0,127,255},
        thickness=1));
    connect(mecChi.port_b1, port_b1) annotation (Line(points={{10,6},{60,6},{60,60},
            {100,60}}, color={0,127,255},
        thickness=1));
    connect(mecChi.port_a2, port_a2) annotation (Line(points={{10,-6},{60,-6},
            {60,-60},{100,-60}}, color={0,127,255},
        thickness=1));
    connect(setPoi, simMot.setPoi) annotation (Line(points={{-110,90},{-60,90},
            {-60,54},{-41.5,54}},
                                color={0,0,127},
        thickness=1));
    connect(meaPoi, simMot.mea) annotation (Line(points={{-110,30},{-60,30},{
            -60,48},{-41.5,48}},
                       color={0,0,127},
        thickness=1));
    connect(loaTor.y, simMot.tau_m) annotation (Line(points={{-37,20},{-37,18},
            {-46,18},{-46,38},{-41.5,38}},
                                color={0,0,127},
        thickness=1));
    connect(simMot.terminal, terminal) annotation (Line(points={{-28.3333,56},{
            -28.3333,86},{0,86},{0,100}},
                      color={0,120,120},
        thickness=1));
    connect(mecChi.shaft, simMot.shaft) annotation (Line(points={{0,10},{0,46},
            {-20,46}},               color={0,0,0},
        thickness=1));
    annotation (Icon(coordinateSystem(preserveAspectRatio=true,extent={{-100,
              -80},{100,100}}),
                           graphics={
          Rectangle(
            extent={{-70,80},{70,-80}},
            lineColor={0,0,255},
            pattern=LinePattern.None,
            fillColor={95,95,95},
            fillPattern=FillPattern.Solid),
          Rectangle(
            extent={{-56,68},{58,50}},
            lineColor={0,0,0},
            fillColor={255,255,255},
            fillPattern=FillPattern.Solid),
          Rectangle(
            extent={{-56,-52},{58,-70}},
            lineColor={0,0,0},
            fillColor={255,255,255},
            fillPattern=FillPattern.Solid),
          Rectangle(
            extent={{-103,64},{98,54}},
            lineColor={0,0,255},
            pattern=LinePattern.None,
            fillColor={0,0,255},
            fillPattern=FillPattern.Solid),
          Rectangle(
            extent={{-2,54},{98,64}},
            lineColor={0,0,255},
            pattern=LinePattern.None,
            fillColor={255,0,0},
            fillPattern=FillPattern.Solid),
          Rectangle(
            extent={{-101,-56},{100,-66}},
            lineColor={0,0,255},
            pattern=LinePattern.None,
            fillColor={0,0,255},
            fillPattern=FillPattern.Solid),
          Rectangle(
            extent={{-100,-66},{0,-56}},
            lineColor={0,0,127},
            pattern=LinePattern.None,
            fillColor={0,0,127},
            fillPattern=FillPattern.Solid),
          Polygon(
            points={{-42,0},{-52,-12},{-32,-12},{-42,0}},
            lineColor={0,0,0},
            smooth=Smooth.None,
            fillColor={255,255,255},
            fillPattern=FillPattern.Solid),
          Polygon(
            points={{-42,0},{-52,10},{-32,10},{-42,0}},
            lineColor={0,0,0},
            smooth=Smooth.None,
            fillColor={255,255,255},
            fillPattern=FillPattern.Solid),
          Rectangle(
            extent={{-44,50},{-40,10}},
            lineColor={0,0,0},
            fillColor={255,255,255},
            fillPattern=FillPattern.Solid),
          Rectangle(
            extent={{-44,-12},{-40,-52}},
            lineColor={0,0,0},
            fillColor={255,255,255},
            fillPattern=FillPattern.Solid),
          Rectangle(
            extent={{38,50},{42,-52}},
            lineColor={0,0,0},
            fillColor={255,255,255},
            fillPattern=FillPattern.Solid),
          Ellipse(
            extent={{18,22},{62,-20}},
            lineColor={0,0,0},
            fillColor={255,255,255},
            fillPattern=FillPattern.Solid),
          Polygon(
            points={{40,22},{22,-10},{58,-10},{40,22}},
            lineColor={0,0,0},
            smooth=Smooth.None,
            fillColor={255,255,255},
            fillPattern=FillPattern.Solid),
          Line(points={{62,0},{80,0}}, color={0,0,255}),
          Line(points={{80,30},{100,30}}, color={0,0,255}),
          Line(points={{80,0},{80,30}}, color={0,0,255}),
          Line(points={{80,-30},{100,-30}}, color={0,0,255}),
          Line(points={{80,-30},{80,0}}, color={0,0,255})}),
          defaultComponentName="chi",
      Documentation(info="<html>
<p>
This is a model of a squirrel cage induction motor coupled chiller with 
ideal speed control. The model has electrical interfaces and can be used for 
simulating microgrids and discussing grid interactions.
</p>
</html>",   revisions="<html>
<ul>
<li>
October 15, 2021, by Mingzhe Liu:<br/>
First implementation.
</li>
</ul>
</html>"),
      Diagram(coordinateSystem(extent={{-100,-80},{100,100}})));
  end Chiller_Beta;

  package Examples
  extends Modelica.Icons.ExamplesPackage;

    model Chiller_Beta
      "This example shows how to use the motor coupled chiller model"
      extends Modelica.Icons.Example;
      package MediumW = Buildings.Media.Water "Medium model";

      parameter Modelica.Units.SI.Power P_nominal=10E3
        "Nominal compressor power (at y=1)";
      parameter Modelica.Units.SI.TemperatureDifference dTEva_nominal=-10
        "Temperature difference evaporator outlet-inlet";
      parameter Modelica.Units.SI.TemperatureDifference dTCon_nominal=10
        "Temperature difference condenser outlet-inlet";
      parameter Real COP_nominal=3 "Chiller COP";
      parameter Modelica.Units.SI.MassFlowRate m2_flow_nominal=
         -P_nominal*COP_nominal/dTEva_nominal/4200
        "Nominal mass flow rate at chilled water side";
      parameter Modelica.Units.SI.MassFlowRate m1_flow_nominal=
        m2_flow_nominal*(COP_nominal+1)/COP_nominal
        "Nominal mass flow rate at condenser water wide";

      Buildings.Fluid.Sources.MassFlowSource_T sou1(
        redeclare package Medium = Buildings.Media.Water,
        use_T_in=true,
        m_flow=m1_flow_nominal,
        T=298.15,
        nPorts=1) "Water source 1"
        annotation (Placement(transformation(extent={{-60,0},{-40,20}})));
      Buildings.Fluid.Sources.MassFlowSource_T sou2(
        redeclare package Medium = Buildings.Media.Water,
        use_T_in=true,
        m_flow=m2_flow_nominal,
        T=291.15,
        nPorts=1) "Water source 2"
        annotation (Placement(transformation(extent={{60,-40},{40,-20}})));
      Buildings.Electrical.AC.ThreePhasesBalanced.Sources.Grid Sou(f=50, V=230*
            1.414)
        "Voltage source"
        annotation (Placement(transformation(extent={{-8,56},{12,76}})));
      Buildings.Fluid.Sensors.TemperatureTwoPort senTem(redeclare package
          Medium =
            Buildings.Media.Water,
          m_flow_nominal=m2_flow_nominal) "Temperature sensor"
        annotation (Placement(transformation(extent={{-24,-40},{-44,-20}})));
      Buildings.Fluid.Sources.Boundary_pT sin2(redeclare package Medium =
            Buildings.Media.Water, nPorts=1)
                    "Water sink 2" annotation (Placement(transformation(
          extent={{-80,-40},{-60,-20}})));
      Buildings.Fluid.Sources.Boundary_pT sin1(redeclare package Medium =
            Buildings.Media.Water, nPorts=1)
                    "Water sink 1" annotation (Placement(transformation(
          extent={{60,0},{40,20}})));

      Buildings.Electrical.AC.ThreePhasesBalanced.Loads.MotorDrive.Coupled.Beta.Chiller_Beta
        chi(
        redeclare package Medium1 = Buildings.Media.Water,
        redeclare package Medium2 = Buildings.Media.Water,
        dTEva_nominal=dTEva_nominal,
        dTCon_nominal=dTCon_nominal,
        P_nominal=P_nominal,
        Nrpm_nominal=1800,
        dp1_nominal=1000,
        dp2_nominal=1000,
        etaCarnot_nominal=0.5,
        pole=4,
        R_s=1,
        R_r=1.145,
        X_s=0.1457,
        X_r=0.1458,
        X_m=0.1406,
        JLoad=2,
        JMotor=2,
        have_controller=true)
        annotation (Placement(transformation(extent={{-8,-12},{12,8}})));
      Modelica.Blocks.Sources.Ramp TEva_in1(
        height=0,
        duration=600,
        offset=273.15 + 15,
        startTime=0)  "Condenser inlet temperature"
        annotation (Placement(transformation(extent={{94,-36},{74,-16}})));
      Modelica.Blocks.Sources.Step TSet1(
        height=-2,
        offset=273.15 + 5,
        startTime=500) "Condenser side leaving water temperature set point"
        annotation (Placement(transformation(extent={{-60,40},{-40,60}})));
      Modelica.Blocks.Sources.Ramp TCon_in(
        height=0,
        duration=60,
        offset=273.15 + 20,
        startTime=0)  "Condenser inlet temperature"
        annotation (Placement(transformation(extent={{-96,4},{-76,24}})));
    equation
      connect(Sou.terminal, chi.terminal)
        annotation (Line(points={{2,56},{2,8}},         color={0,120,120},
          thickness=0.5));
      connect(sou2.T_in, TEva_in1.y)
        annotation (Line(points={{62,-26},{73,-26}},       color={0,0,127},
          thickness=0.5));
      connect(sou1.T_in, TCon_in.y)
        annotation (Line(points={{-62,14},{-75,14}}, color={0,0,127},
          thickness=0.5));
      connect(senTem.T, chi.meaPoi)
        annotation (Line(points={{-34,-19},{-34,1},{-9,1}}, color={238,46,47},
          thickness=0.5));
      connect(sou2.ports[1], chi.port_a2) annotation (Line(points={{40,-30},{18,
              -30},{18,-8},{12,-8}},color={0,127,255},
          thickness=0.5));
      connect(chi.port_b1, sin1.ports[1]) annotation (Line(points={{12,4},{32,4},
              {32,10},{40,10}}, color={0,127,255},
          thickness=0.5));
      connect(sou1.ports[1], chi.port_a1) annotation (Line(points={{-40,10},{
              -36,10},{-36,4},{-8,4}}, color={0,127,255},
          thickness=0.5));
      connect(chi.port_b2, senTem.port_a) annotation (Line(points={{-8,-8},{-18,
              -8},{-18,-30},{-24,-30}}, color={0,127,255},
          thickness=0.5));
      connect(senTem.port_b, sin2.ports[1])
        annotation (Line(points={{-44,-30},{-60,-30}}, color={0,127,255},
          thickness=0.5));
      connect(TSet1.y, chi.setPoi) annotation (Line(
          points={{-39,50},{-9,50},{-9,7}},
          color={0,0,127},
          thickness=0.5));
      annotation (experiment(
          StopTime=600,
          Tolerance=1e-06,
          __Dymola_Algorithm="Dassl"),
    __Dymola_Commands(file="modelica://Buildings/Resources/Scripts/Dymola/Electrical/AC/ThreePhasesBalanced/Loads/MotorDrive/Coupled/Examples/Chiller.mos"
            "Simulate and plot"),
        Documentation(info="<html>
<p>
Example that simulates a motor coupled chiller to track the set point signal 
as the evaporator entering temperate changes.
</p>
</html>",     revisions="<html>
<ul>
<li>
October 15, 2021, by Mingzhe Liu:<br/>
First implementation. 
</li>
</ul>
</html>"));
    end Chiller_Beta;

    model HeatPump_beta
      "This example shows how to use the motor coupled heat pump model"
      extends Modelica.Icons.Example;
      package MediumW = Buildings.Media.Water "Medium model";

      parameter Modelica.Units.SI.Power P_nominal=10E3
        "Nominal compressor power (at y=1)";
      parameter Modelica.Units.SI.TemperatureDifference dTEva_nominal=-10
        "Temperature difference evaporator outlet-inlet";
      parameter Modelica.Units.SI.TemperatureDifference dTCon_nominal=10
        "Temperature difference condenser outlet-inlet";
      parameter Real COP_nominal=3 "Chiller COP";
      parameter Modelica.Units.SI.MassFlowRate m2_flow_nominal=
         -P_nominal*COP_nominal/dTEva_nominal/4200
        "Nominal mass flow rate at chilled water side";
      parameter Modelica.Units.SI.MassFlowRate m1_flow_nominal=
        m2_flow_nominal*(COP_nominal+1)/COP_nominal
        "Nominal mass flow rate at condenser water wide";

      Modelica.Blocks.Sources.Ramp TCon_in(
        height=0,
        duration=60,
        offset=273.15 + 20,
        startTime=60) "Condenser inlet temperature"
        annotation (Placement(transformation(extent={{-94,-10},{-74,10}})));
      Buildings.Fluid.Sources.MassFlowSource_T sou2(
        redeclare package Medium = Buildings.Media.Water,
        use_T_in=true,
        m_flow=m2_flow_nominal,
        T=291.15,
        nPorts=1) "Water source 2"
        annotation (Placement(transformation(extent={{60,-60},{40,-40}})));
      Buildings.Electrical.AC.ThreePhasesBalanced.Sources.Grid Sou(f=50, V=230*
            1.414)
        "Voltage source"
        annotation (Placement(transformation(extent={{-10,16},{10,36}})));
      Buildings.Fluid.Sensors.TemperatureTwoPort senTem(redeclare package Medium =
            Buildings.Media.Water,
        m_flow_nominal=m2_flow_nominal) "Temperature sensor"
        annotation (Placement(transformation(extent={{34,-14},{54,6}})));
      Modelica.Blocks.Sources.Step TSet(
        height=5,
        offset=273.15 + 20,
        startTime=500) "Condenser side leaving water temperature set point"
        annotation (Placement(transformation(extent={{-62,22},{-42,42}})));
      Modelica.Blocks.Sources.Ramp TEva_in(
        height=0,
        duration=60,
        offset=273.15 + 15,
        startTime=60) "Condenser inlet temperature"
        annotation (Placement(transformation(extent={{96,-56},{76,-36}})));
      Buildings.Fluid.Sources.Boundary_pT sin2(redeclare package Medium =
            Buildings.Media.Water, nPorts=1)
                  "Water sink 2"
        annotation (Placement(transformation(extent={{-60,-60},{-40,-40}})));
      Buildings.Fluid.Sources.Boundary_pT sin1(redeclare package Medium =
            Buildings.Media.Water,
        nPorts=1) "Water sink 1"
        annotation (Placement(transformation(extent={{90,-14},{70,6}})));

      Beta.HeatPump_Beta hea(
        redeclare package Medium1 = Buildings.Media.Water,
        redeclare package Medium2 = Buildings.Media.Water,
        dTEva_nominal=dTEva_nominal,
        dTCon_nominal=dTCon_nominal,
        P_nominal=P_nominal,
        Nrpm_nominal=1800,
        dp1_nominal=1000,
        dp2_nominal=1000,
        etaCarnot_nominal=0.5,
        pole=4,
        R_s=1,
        R_r=1.145,
        X_s=0.1457,
        X_r=0.1458,
        X_m=0.1406,
        JLoad=2,
        JMotor=2,
        have_controller=true)
        annotation (Placement(transformation(extent={{-10,-20},{10,0}})));
      Fluid.Sources.MassFlowSource_T           sou1(
        redeclare package Medium = MediumW,
        use_T_in=true,
        m_flow=m1_flow_nominal,
        T=298.15,
        nPorts=1) "Water source 1"
        annotation (Placement(transformation(extent={{-50,-14},{-30,6}})));
    equation
      connect(sou2.T_in, TEva_in.y) annotation (Line(points={{62,-46},{75,-46}},
                                  color={0,0,127},
          thickness=1));
      connect(senTem.port_b, sin1.ports[1]) annotation (Line(points={{54,-4},{70,-4}},
                                color={0,127,255},
          thickness=1));
      connect(hea.port_b2, sin2.ports[1]) annotation (Line(points={{-10,-16},{-34,-16},
              {-34,-50},{-40,-50}}, color={0,127,255},
          thickness=1));
      connect(TSet.y, hea.setPoi) annotation (Line(points={{-41,32},{-20,32},{-20,-1},
              {-11,-1}},       color={0,140,72},
          thickness=1));
      connect(senTem.T, hea.meaPoi) annotation (Line(points={{44,7},{44,40},{-22,40},
              {-22,-7},{-11,-7}},
                              color={238,46,47},
          thickness=1));
      connect(hea.port_a2, sou2.ports[1]) annotation (Line(points={{10,-16},{34,-16},
              {34,-50},{40,-50}}, color={0,127,255},
          thickness=1));
      connect(hea.port_b1, senTem.port_a) annotation (Line(points={{10,-4},{34,-4}},
                               color={0,127,255},
          thickness=1));
      connect(Sou.terminal, hea.terminal)
        annotation (Line(points={{0,16},{0,8.88178e-16}},
                                                  color={0,120,120},
          thickness=1));
      connect(sou1.T_in, TCon_in.y)
        annotation (Line(points={{-52,0},{-73,0}}, color={0,0,127}));
      connect(sou1.ports[1], hea.port_a1)
        annotation (Line(points={{-30,-4},{-10,-4}}, color={0,127,255}));
      annotation (experiment(
          StopTime=1000,
          Tolerance=1e-06,
          __Dymola_Algorithm="Dassl"),
    __Dymola_Commands(file="modelica://Buildings/Resources/Scripts/Dymola/Electrical/AC/ThreePhasesBalanced/Loads/MotorDrive/Coupled/Examples/HeatPump.mos"
            "Simulate and plot"),
        Documentation(info="<html>
<p>
Example that simulates a motor coupled heat pump to track the set point signal 
as the condenser entering temperate changes. 
</p>
</html>",     revisions="<html>
<ul>
<li>
October 15, 2021, by Mingzhe Liu:<br/>
First implementation. 
</li>
</ul>
</html>"));
    end HeatPump_beta;

    model Pump_beta
      "This example shows how to use the motor coupled pump model"
      extends Modelica.Icons.Example;
      package MediumW = Buildings.Media.Water;
      parameter Modelica.Units.SI.MassFlowRate m_flow_nominal = 1 "Nominal mass flow rate";
      parameter Modelica.Units.SI.Pressure dp_nominal=500   "nominal pressure drop";

      Buildings.Fluid.Sources.Boundary_pT sou(redeclare package Medium =
            Buildings.Media.Water,
        nPorts=1) "Boundary"
        annotation (Placement(transformation(extent={{-10,-10},{10,10}}, rotation=0,
          origin={-90,20})));

      Buildings.Electrical.AC.ThreePhasesBalanced.Sources.Grid gri(f=50, V=230*
            1.414)
        "Voltage source"
        annotation (Placement(transformation(extent={{-2,42},{18,62}})));
      Buildings.Fluid.Sensors.MassFlowRate senMasFlo(redeclare package Medium =
            Buildings.Media.Water)
        "Flow rate sensor"
        annotation (Placement(transformation(extent={{0,-50},{-20,-30}})));
      Buildings.Fluid.FixedResistances.PressureDrop dp1(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=m_flow_nominal,
        dp_nominal=1/2*dp_nominal) "Pressure loss"
        annotation (Placement(transformation(extent={{-40,10},{-20,30}})));
      Buildings.Fluid.FixedResistances.PressureDrop dp2(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=m_flow_nominal,
        dp_nominal=1/2*dp_nominal) "Pressure loss"
        annotation (Placement(transformation(extent={{40,10},{60,30}})));

      Buildings.Electrical.AC.ThreePhasesBalanced.Loads.MotorDrive.Coupled.Beta.Pump_beta
        pum1(
        redeclare package Medium = Buildings.Media.Water,
        redeclare
          Buildings.Fluid.Movers.Data.Pumps.Wilo.VeroLine50slash150dash4slash2
          per,
        R_s=1,
        R_r=1.145,
        X_s=0.1457,
        X_r=0.1458,
        X_m=0.1406,
        JLoad=2,
        JMotor=2,
        have_controller=true,
        pum(pum(energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial)))
        annotation (Placement(transformation(extent={{-2,10},{18,30}})));

      Modelica.Blocks.Sources.Step Set_Point(height=10, startTime=500)
        annotation (Placement(transformation(extent={{-60,40},{-40,60}})));
    equation
      connect(dp1.port_a, senMasFlo.port_b) annotation (Line(points={{-40,20},{-60,20},
              {-60,-40},{-20,-40}}, color={0,127,255},
          thickness=1));
      connect(dp2.port_b, senMasFlo.port_a) annotation (Line(points={{60,20},{80,20},
              {80,-40},{0,-40}}, color={0,127,255},
          thickness=1));
      connect(sou.ports[1], dp1.port_a) annotation (Line(points={{-80,20},{-40,20}},
              color={0,127,255},
          thickness=1));
      connect(pum1.port_a, dp1.port_b)
        annotation (Line(points={{-2,20},{-20,20}}, color={0,127,255},
          thickness=1));
      connect(pum1.port_b, dp2.port_a)
        annotation (Line(points={{18,20},{40,20}}, color={0,127,255},
          thickness=1));
      connect(senMasFlo.m_flow, pum1.meaPoi)
        annotation (Line(points={{-10,-29},{-10,24},{-3,24}}, color={238,46,47},
          thickness=1));

      connect(gri.terminal, pum1.terminal)
        annotation (Line(points={{8,42},{8,30}},         color={0,120,120},
          thickness=1));
      connect(Set_Point.y, pum1.setPoi) annotation (Line(
          points={{-39,50},{-26,50},{-26,28},{-3,28}},
          color={0,140,72},
          thickness=1));
      annotation (experiment(
          StopTime=1000,
          Tolerance=1e-06,
          __Dymola_Algorithm="Dassl"),
    __Dymola_Commands(file="modelica://Buildings/Resources/Scripts/Dymola/Electrical/AC/ThreePhasesBalanced/Loads/MotorDrive/Coupled/Examples/Pump.mos"
            "Simulate and plot"),
        Documentation(info="<html>
<p>
Example that simulates a motor coupled pump to track the set point signal as 
the load changes.
</p>
</html>",     revisions="<html>
<ul>
<li>
October 15, 2021, by Mingzhe Liu:<br/>
First implementation. 
</li>
</ul>
</html>"));
    end Pump_beta;
  end Examples;

end Beta;
